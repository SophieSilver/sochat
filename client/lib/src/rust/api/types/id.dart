// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The functions `fmt`, `clone`, `eq`, `assert_receiver_is_total_eq`, `from`, `from`, `fmt`, `clone`, `eq`, `assert_receiver_is_total_eq`, `from`, `from` are not `pub`, thus are ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessageId>>
@sealed
class MessageId extends RustOpaque {
  // Not to be used by end users
  MessageId.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageId.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessageId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageIdPtr,
  );

  bool equals({required MessageId other}) => RustLib.instance.api
      .crateApiTypesIdMessageIdEquals(that: this, other: other);

  String toString() => RustLib.instance.api.crateApiTypesIdMessageIdToString(
        that: this,
      );

  @override
  bool operator ==(Object other) {
    if (other.runtimeType != this.runtimeType) {
      return false;
    }
    return this.equals(other: other as dynamic);
  } // weird curly to get around frb bug
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UserId>>
@sealed
class UserId extends RustOpaque {
  // Not to be used by end users
  UserId.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UserId.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UserId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UserIdPtr,
  );

  bool equals({required UserId other}) => RustLib.instance.api
      .crateApiTypesIdUserIdEquals(that: this, other: other);

  PlatformInt64 get hashCode =>
      RustLib.instance.api.crateApiTypesIdUserIdHashCode(
        that: this,
      );

  String toString() => RustLib.instance.api.crateApiTypesIdUserIdToString(
        that: this,
      );

  @override
  bool operator ==(Object other) {
    if (other.runtimeType != this.runtimeType) {
      return false;
    }
    return this.equals(other: other as dynamic);
  } // weird curly to get around frb bug
}